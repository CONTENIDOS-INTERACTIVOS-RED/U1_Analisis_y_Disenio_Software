(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["tema7"],{"00db":function(a,e,s){a.exports=s.p+"img/26.e11ad4b3.png"},"0661":function(a,e,s){a.exports=s.p+"img/icono-yt.0e5f1361.svg"},"0d07":function(a,e,s){a.exports=s.p+"img/21.e2204f8f.png"},2391:function(a,e,s){a.exports=s.p+"img/material-complementario.06dbfac1.svg"},2978:function(a,e,s){a.exports=s.p+"img/12.8b226699.svg"},"2efd":function(a,e,s){"use strict";s.r(e);var t=function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"curso-main-container pb-3"},[t("BannerInterno",{attrs:{subTitulo:"7. Principios SOLID"}}),t("div",{staticClass:"container tarjeta tarjeta--blanca p-4 p-md-5 overflow-hidden"},[a._m(0),a._m(1),a._m(2),a._m(3),a._m(4),a._m(5),t("h2",{attrs:{"data-aos":"fade-left"}},[a._v("Problemáticas comunes en el diseño sin principios sólidos")]),t("p",{staticClass:"mb-5"},[a._v("A pesar de sus ventajas, un mal uso del diseño orientado a objetos, puede generar sistemas acoplados, frágiles y difíciles de mantener. Entre los errores frecuentes se encuentran:")]),a._m(6),a._m(7),a._m(8),t("p",{staticClass:"mb-5"},[a._v("El Principio de Responsabilidad Única (SRP) es una de las bases del diseño orientado a objetos y una herramienta clave para lograr un código modular, limpio y mantenible.")]),t("div",{staticClass:"bg-full-width bg-color-8 mb-5"},[t("div",{staticClass:"px-4 p-md-5"},[t("div",{staticClass:"row justify-content-center align-items-center"},[t("div",{staticClass:"col-lg-8 order-2 text-white"},[t("h2",{staticClass:"mb-4",attrs:{"data-aos":"flip-up"}},[a._v("Principio de Responsabilidad Única (SRP)")]),a._m(9),t("a",{staticClass:"anexo mb-4 bg-white w-fit",attrs:{href:a.obtenerLink("/downloads/Anexo_13.pdf"),target:"_blank","data-aos":"flip-up"}},[t("div",{staticClass:"anexo__icono",style:{"background-color":"#FCDFDB"}},[t("img",{attrs:{src:s("f906")}})]),a._m(10)])]),a._m(11)])])]),a._m(12),a._m(13),t("h2",{attrs:{"data-aos":"fade-left"}},[a._v("Problemática cuando se viola el OCP")]),t("p",{staticClass:"mb-5"},[a._v("En muchos sistemas, los cambios de requerimientos implican modificar directamente clases ya existentes. Este enfoque puede traer consecuencias negativas:")]),a._m(14),t("h2",{attrs:{"data-aos":"fade-left"}},[a._v("Ejemplo de violación al OCP")]),t("p",{staticClass:"mb-5"},[a._v("Considérese el siguiente ejemplo en Java, donde una clase calcula el salario, según el tipo de empleado:")]),a._m(15),a._m(16),t("h2",{attrs:{"data-aos":"fade-left"}},[a._v("Aplicación del OCP con herencia y polimorfismo")]),t("p",{staticClass:"mb-5"},[a._v("Una forma efectiva de aplicar el OCP es mediante el uso de interfaces o clases abstractas, lo que permite extender funcionalidades sin modificar las clases existentes:")]),a._m(17),a._m(18),a._m(19),t("p",{staticClass:"mb-5"},[a._v("El Principio de Sustitución de Liskov es un pilar esencial en el diseño orientado a objetos, ya que asegura que las clases derivadas mantengan un comportamiento coherente con sus clases base, favoreciendo así la reutilización y mantenibilidad del código.")]),t("div",{staticClass:"bg-full-width bg-color-8 mb-5"},[t("div",{staticClass:"px-4 p-md-5"},[t("div",{staticClass:"row justify-content-center align-items-center"},[t("div",{staticClass:"col-lg-8 order-2 text-white"},[t("h2",{staticClass:"mb-4",attrs:{"data-aos":"flip-up"}},[a._v("Principio de Sustitución de Liskov (LSP)")]),a._m(20),t("a",{staticClass:"anexo mb-4 bg-white w-fit",attrs:{href:a.obtenerLink("/downloads/Anexo_14.pdf"),target:"_blank","data-aos":"flip-up"}},[t("div",{staticClass:"anexo__icono",style:{"background-color":"#FCDFDB"}},[t("img",{attrs:{src:s("f906")}})]),a._m(21)])]),a._m(22)])])]),a._m(23),a._m(24),t("h2",{attrs:{"data-aos":"fade-left"}},[a._v("Problema común: una interfaz demasiado grande")]),t("p",[a._v("Cuando una interfaz abarca demasiadas responsabilidades, los clientes que la implementan pueden verse forzados a proporcionar definiciones para métodos que no tienen sentido en su contexto (Leiva, 2021). Esto genera código redundante o vacío, dificulta el mantenimiento y rompe con los principios de diseño limpio.")]),t("p",{staticClass:"mb-5"},[a._v("Ejemplo de violación del ISP:")]),a._m(25),a._m(26),t("h2",{attrs:{"data-aos":"fade-left"}},[a._v("Solución adecuada: interfaces segregadas")]),t("p",[a._v("Una mejor estrategia consiste en dividir la interfaz grande en varias interfaces más pequeñas, cada una específica para una funcionalidad. Esto permite que las clases solo implementen aquello que necesitan.")]),t("p",{staticClass:"mb-5"},[a._v("Ejemplo de cumplimiento del ISP:")]),a._m(27),a._m(28),a._m(29),t("p",{staticClass:"mb-5"},[a._v("El Principio de Inversión de Dependencias (DIP) es fundamental en el diseño de sistemas flexibles y escalables, ya que promueve la separación entre abstracción y detalle, evitando la dependencia directa de implementaciones concretas.")]),t("div",{staticClass:"bg-full-width bg-color-8 mb-5"},[t("div",{staticClass:"px-4 p-md-5"},[t("div",{staticClass:"row justify-content-center align-items-center"},[t("div",{staticClass:"col-lg-8 text-white"},[t("h2",{staticClass:"mb-4",attrs:{"data-aos":"flip-up"}},[a._v("Principio de Inversión de Dependencias (DIP)")]),a._m(30),t("a",{staticClass:"anexo mb-4 bg-white w-fit",attrs:{href:a.obtenerLink("/downloads/Anexo_15.pdf"),target:"_blank","data-aos":"flip-up"}},[t("div",{staticClass:"anexo__icono",style:{"background-color":"#FCDFDB"}},[t("img",{attrs:{src:s("f906")}})]),a._m(31)])]),a._m(32)])])]),t("div",{staticClass:"bg-full-width border-top actividad bg-color-actividad"},[t("div",{staticClass:"p-4 p-md-5"},[t("div",{attrs:{id:"Actividad"}},[t("Actividad",{attrs:{cuestionario:a.cuestionario}})],1)])]),t("div",{staticClass:"bg-full-width border-top color-primario"},[t("div",{staticClass:"p-4 p-md-5"},[t("h2",{attrs:{"data-aos":"fade-left"}},[a._v("MATERIAL COMPLEMENTARIO")]),t("div",{staticClass:"row material-complementario"},[t("div",{staticClass:"col-12 col-md-6 col-lg-7"},[t("p",[a._v("Los invitamos a explorar el material complementario de este curso, en esta sección encontrará recursos que le permitirán profundizar y enriquecer su aprendizaje en los temas tratados en esta unidad.")]),t("p",{staticClass:"d-flex my-4"},[t("img",{staticClass:"me-3",style:{"max-width":"16px"},attrs:{src:s("a437")}}),t("a",{attrs:{href:"https://cs.uns.edu.ar/~ece/ads/downloads/Clases/2019%2003%20AyDS%20-%20Principios%20SOLID.pdf",target:"_blank",rel:"noopener noreferrer"}},[a._v("Universidad Nacional del Sur. (2019). Principios de diseño SOLID. ")])]),t("p",{staticClass:"d-flex my-4"},[t("img",{staticClass:"me-3",style:{"max-width":"16px"},attrs:{src:s("0661")}}),t("a",{attrs:{href:"https://www.youtube.com/watch?v=E_mSr-VFd3g ",target:"_blank",rel:"noopener noreferrer"}},[a._v("DevExpert. [@devexpert_io] (2021, 13 de mayo). Principios SOLID - 5 + 1 Reglas que CAMBIARÁN tu forma de PROGRAMAR. [Video]. YouTube. ")])])]),a._m(33)])])])])],1)},i=[function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"bg-color-2 mb-5",attrs:{"data-aos":"fade-up"}},[t("div",{staticClass:"row justify-content-center align-items-center"},[t("div",{staticClass:"col-lg-auto mb-3 mb-lg-0"},[t("figure",[t("img",{attrs:{src:s("71e3"),alt:""}})])]),t("div",{staticClass:"col-lg"},[t("div",{staticClass:"p-4"},[t("p",{staticClass:"mb-0 text-white",attrs:{"data-aos":"fade-up"}},[a._v("Los principios SOLID constituyen un conjunto de buenas prácticas en el diseño de "),t("em",[a._v("Software")]),a._v(" orientado a objetos. Su propósito principal es aumentar la calidad, mantenibilidad, flexibilidad y escalabilidad, del código fuente. Estos principios fueron popularizados por Robert C. Martin (Uncle Bob) y han sido adoptados ampliamente en la ingeniería de "),t("em",[a._v("Software")]),a._v(" profesional, como fundamentos claves del diseño limpio (clean code).")])])])])])},function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("p",{staticClass:"mb-5"},[a._v("La sigla SOLID corresponde a las iniciales de cinco principios fundamentales: Single Responsibility Principle, Open/Closed Principle, Liskov Substitution Principle, "),s("em",[a._v("Interface Segregation Principle")]),a._v(" y Dependency Inversion Principle (García Carmona, 2012).")])},function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("div",{staticClass:"titulo-segundo",attrs:{id:"t_7_1","data-aos":"flip-up"}},[s("h2",[s("span",[a._v("7.1")]),a._v(" Introducción al diseño, orientado a los objetos y principios SOLID")])])},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"row mb-5"},[t("div",{staticClass:"col-lg-4 order-lg-2 mb-3 mb-lg-0"},[t("figure",[t("img",{attrs:{src:s("e9fd"),"data-aos":"zoom-in"}})])]),t("div",{staticClass:"col-lg-8 order-lg-1"},[t("p",{staticClass:"mb-5",attrs:{"data-aos":"fade-left"}},[a._v("El diseño orientado a objetos (OO), es una metodología de desarrollo de "),t("em",[a._v("Software")]),a._v(" que se centra en la creación de sistemas utilizando entidades llamadas objetos, los cuales representan elementos del mundo real o conceptos abstractos. ")]),t("div",{staticClass:"bg-color-4 p-4 mb-3",attrs:{"data-aos":"fade-left"}},[t("p",[a._v("Cada objeto combina estado (datos) y comportamiento (métodos o funciones), promoviendo así una representación más natural e intuitiva de los problemas computacionales.")]),t("p",{staticClass:"mb-0"},[a._v("En este enfoque, el "),t("em",[a._v("Software")]),a._v(" se estructura a partir de clases, que actúan como plantillas para crear objetos. Las clases definen las propiedades (atributos) y las operaciones (métodos) que los objetos pueden tener. A través de este modelo, se facilita la reutilización del código, la escalabilidad de los sistemas y la organización modular de las funcionalidades (García Carmona, 2012).")])]),t("p",[a._v("Los cuatro pilares fundamentales del paradigma orientado a objetos, son:")])])])},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"bg-full-width bg-color-3"},[t("div",{staticClass:"p-4 p-md-5"},[t("div",{staticClass:"row justify-content-center align-items-stretch"},[t("div",{staticClass:"col-lg-3 mb-4",attrs:{"data-aos":"zoom-in-up"}},[t("div",{staticClass:"bg-color-white box-shadow px-4 py-5 h-100"},[t("img",{staticClass:"mx-auto d-block mb-4",staticStyle:{width:"90px"},attrs:{src:s("7447"),alt:""}}),t("h5",{staticClass:"text-center"},[a._v("Abstracción")]),t("p",{staticClass:"mb-0 text-center"},[a._v("Permite ocultar los detalles internos y mostrar solo lo esencial del objeto.")])])]),t("div",{staticClass:"col-lg-3 mb-4",attrs:{"data-aos":"zoom-in-up"}},[t("div",{staticClass:"bg-color-white box-shadow px-4 py-5 h-100"},[t("img",{staticClass:"mx-auto d-block mb-4",staticStyle:{width:"90px"},attrs:{src:s("8e9a"),alt:""}}),t("h5",{staticClass:"text-center"},[a._v("Encapsulamiento")]),t("p",{staticClass:"mb-0 text-center"},[a._v("Protege los datos internos del objeto, restringiendo el acceso directo desde el exterior.")])])]),t("div",{staticClass:"col-lg-3 mb-4",attrs:{"data-aos":"zoom-in-up"}},[t("div",{staticClass:"bg-color-white box-shadow px-4 py-5 h-100"},[t("img",{staticClass:"mx-auto d-block mb-4",staticStyle:{width:"90px"},attrs:{src:s("c59e"),alt:""}}),t("h5",{staticClass:"text-center"},[a._v("Herencia")]),t("p",{staticClass:"mb-0 text-center"},[a._v("Facilita la creación de nuevas clases basadas en clases existentes, promoviendo la reutilización.")])])]),t("div",{staticClass:"col-lg-3 mb-4",attrs:{"data-aos":"zoom-in-up"}},[t("div",{staticClass:"bg-color-white box-shadow px-4 py-5 h-100"},[t("img",{staticClass:"mx-auto d-block mb-4",staticStyle:{width:"90px"},attrs:{src:s("6ddc"),alt:""}}),t("h5",{staticClass:"text-center"},[a._v("Polimorfismo")]),t("p",{staticClass:"mb-0 text-center"},[a._v("Permite que distintos objetos respondan de manera diferente al mismo mensaje, aumentando la flexibilidad del código.")])])])])])])},function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("div",{staticClass:"bg-full-width bg-color-2 mb-5"},[s("div",{staticClass:"px-4 px-md-5 py-4"},[s("p",{staticClass:"mb-0 text-white"},[a._v("El diseño OO no se limita a representar entidades, sino que también busca organizar la lógica del sistema de forma coherente y mantenible, favoreciendo la evolución del "),s("em",[a._v("Software")]),a._v(" a lo largo del tiempo.")])])])},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"bg-full-width bg-color-9"},[t("div",{staticClass:"px-4 px-md-5"},[t("div",{staticClass:"row justify-content-center align-items-center"},[t("div",{staticClass:"col-lg-12"},[t("div",{staticClass:"row justify-content-center align-items-center"},[t("div",{staticClass:"col-lg-7 mb-3 mb-lg-0",attrs:{"data-aos":"fade-left"}},[t("ul",{staticClass:"lista-ul--color mb-0"},[t("li",{staticClass:"mb-3 d-flex"},[t("i",{staticClass:"far fa-arrow-alt-circle-right"}),t("p",{staticClass:"mb-0"},[a._v("Clases que asumen múltiples responsabilidades.")])]),t("li",{staticClass:"mb-3 d-flex"},[t("i",{staticClass:"far fa-arrow-alt-circle-right"}),t("p",{staticClass:"mb-0"},[a._v("Código rígido, difícil de extender sin modificar componentes existentes.")])]),t("li",{staticClass:"mb-3 d-flex"},[t("i",{staticClass:"far fa-arrow-alt-circle-right"}),t("p",{staticClass:"mb-0"},[a._v("Jerarquías de herencia mal definidas.")])]),t("li",{staticClass:"mb-3 d-flex"},[t("i",{staticClass:"far fa-arrow-alt-circle-right"}),t("p",{staticClass:"mb-0"},[a._v("Interfaces sobrecargadas con métodos innecesarios.")])]),t("li",{staticClass:"mb-3 d-flex"},[t("i",{staticClass:"far fa-arrow-alt-circle-right"}),t("p",{staticClass:"mb-0"},[a._v("Dependencias directas entre módulos que impiden la reutilización o las pruebas automatizadas.")])])])]),t("div",{staticClass:"col-lg-5",attrs:{"data-aos":"zoom-in"}},[t("img",{staticClass:"img-fluid mx-auto mx-lg-0 ms-lg-auto mb-4 mb-lg-0",staticStyle:{"max-width":"486px"},attrs:{src:s("6734"),alt:""}})])])])])])])},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"bg-full-width bg-color-10 mb-5"},[t("div",{staticClass:"px-4 px-md-5 py-4"},[t("div",{staticClass:"row align-items-center"},[t("div",{staticClass:"col-lg-auto"},[t("img",{staticClass:"mx-auto",staticStyle:{"max-width":"90px"},attrs:{src:s("57af")}})]),t("div",{staticClass:"col-lg"},[t("p",{staticClass:"mb-0"},[a._v("Para contrarrestar estas debilidades, han surgido buenas prácticas y principios que guían a los desarrolladores en la creación de sistemas más robustos y flexibles. Entre estos principios, los denominados SOLID, ocupan un lugar central.")])])])])])},function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("div",{staticClass:"titulo-segundo",attrs:{id:"t_7_2","data-aos":"flip-up"}},[s("h2",[s("span",[a._v("7.2")]),a._v(" Principio de Responsabilidad Única (SRP)")])])},function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("p",{staticClass:"mb-4",attrs:{"data-aos":"fade-right"}},[a._v("En el PDF "),s("b",[a._v("Principio de Responsabilidad Única")]),a._v(", se estudia cómo una clase debe tener una sola razón para cambiar, evitando que asuma múltiples responsabilidades que dificulten su reutilización, prueba y comprensión. A través de ejemplos ilustrativos y recomendaciones prácticas, se muestra cómo aplicar este principio mejora la cohesión, facilita el trabajo colaborativo y fortalece la arquitectura del sistema.")])},function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("div",{staticClass:"anexo__texto"},[s("p",[s("strong",[a._v("Anexo. ")]),a._v(" Principio de Responsabilidad Única (SRP).")])])},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"col-lg-4 order-1 mb-3 mb-lg-0"},[t("figure",{attrs:{"data-aos":"zoom-in"}},[t("img",{attrs:{src:s("9cff"),alt:""}})])])},function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("div",{staticClass:"titulo-segundo",attrs:{id:"t_7_3","data-aos":"flip-up"}},[s("h2",[s("span",[a._v("7.3")]),a._v(" Principio de Abierto/Cerrado (OCP)")])])},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"row mb-5"},[t("div",{staticClass:"col-lg-4 order-lg-2 mb-3 mb-lg-0"},[t("figure",[t("img",{attrs:{src:s("8ec2"),"data-aos":"zoom-in"}})])]),t("div",{staticClass:"col-lg-8 order-lg-1"},[t("p",{staticClass:"mb-5",attrs:{"data-aos":"fade-left"}},[a._v("El Principio de Abierto/Cerrado (OCP) establece que las entidades de "),t("em",[a._v("Software")]),a._v(" (como clases, módulos o funciones), deben estar abiertas para su extensión, pero cerradas para su modificación. Esto significa que el comportamiento de una clase puede ser extendido, sin necesidad de alterar su código fuente original (García Carmona, 2012). ")]),t("div",{staticClass:"bg-color-6 p-4 mb-3",attrs:{"data-aos":"fade-left"}},[t("p",{staticClass:"mb-0"},[a._v("El objetivo central del OCP es proteger la estabilidad del sistema ante cambios constantes, fomentando la reutilización del código existente y reduciendo el riesgo de errores al modificar componentes ya probados. Se trata de un principio esencial en el desarrollo evolutivo de "),t("em",[a._v("Software")]),a._v(", donde las funcionalidades crecen sin comprometer lo que ya funciona.")])])])])},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"row justify-content-center align-items-stretch mb-4"},[t("div",{staticClass:"col-lg-4 mb-3 mb-lg-0"},[t("div",{staticClass:"bg-color-8 p-4 h-100",attrs:{"data-aos":"fade-left"}},[t("div",{staticClass:"row align-items-center"},[t("div",{staticClass:"col-lg-auto"},[t("img",{staticClass:"mx-auto",staticStyle:{"max-width":"90px"},attrs:{src:s("37b0")}})]),t("div",{staticClass:"col-lg text-white"},[t("h5",{staticClass:"mb-2"},[a._v("Fragilidad del código")]),t("p",{staticClass:"mb-0"},[a._v("Cualquier modificación en una clase estable puede introducir errores no previstos.")])])])])]),t("div",{staticClass:"col-lg-4 mb-3 mb-lg-0"},[t("div",{staticClass:"bg-color-8 p-4 h-100",attrs:{"data-aos":"fade-left"}},[t("div",{staticClass:"row align-items-center"},[t("div",{staticClass:"col-lg-auto"},[t("img",{staticClass:"mx-auto",staticStyle:{"max-width":"90px"},attrs:{src:s("2978")}})]),t("div",{staticClass:"col-lg text-white"},[t("h5",{staticClass:"mb-2"},[a._v("Dificultad para escalar")]),t("p",{staticClass:"mb-0"},[a._v("El sistema se vuelve menos flexible y más costoso de mantener.")])])])])]),t("div",{staticClass:"col-lg-4 mb-3 mb-lg-0"},[t("div",{staticClass:"bg-color-8 p-4 h-100",attrs:{"data-aos":"fade-left"}},[t("div",{staticClass:"row align-items-center"},[t("div",{staticClass:"col-lg-auto"},[t("img",{staticClass:"mx-auto",staticStyle:{"max-width":"90px"},attrs:{src:s("b6b3")}})]),t("div",{staticClass:"col-lg text-white"},[t("h5",{staticClass:"mb-2"},[a._v("Dependencia innecesaria")]),t("p",{staticClass:"mb-0"},[a._v("Múltiples partes del sistema pueden verse afectadas por el cambio de una sola clase.")])])])])])])},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"bg-color-9 p-5"},[t("div",{staticClass:"row justify-content-center"},[t("div",{staticClass:"col-lg-5"},[t("figure",[t("img",{attrs:{src:s("d8fd"),"data-aos":"zoom-in"}})])])])])},function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("div",{staticClass:"bg-color-10 mb-5"},[s("div",{staticClass:"px-4 px-md-5 py-4"},[s("p",{staticClass:"mb-0"},[a._v("Cada vez que se introduce un nuevo tipo de empleado, es necesario modificar la clase CalculadoraSalario, lo cual viola el principio de OCP, puesto que la clase no está cerrada a cambios.")])])])},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"bg-color-9 p-5"},[t("div",{staticClass:"row justify-content-center"},[t("div",{staticClass:"col-lg-5"},[t("figure",[t("img",{attrs:{src:s("6530b"),"data-aos":"zoom-in"}})])]),t("div",{staticClass:"col-lg-7"},[t("figure",[t("img",{attrs:{src:s("4d8e"),"data-aos":"zoom-in"}})]),t("div",{staticClass:"bg-color-2 mb-5 text-white p-4"},[t("p",{staticClass:"mb-0"},[a._v("En este diseño, la clase CalculadoraSalario, no necesita cambiar si se agrega un nuevo tipo de empleado, porque basta con crear una nueva clase que implemente la interfaz, Empleado. Así se extiende el comportamiento sin modificar el código original, cumpliendo el OCP.")])])])])])},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"bg-full-width bg-color-11"},[t("div",{staticClass:"p-4 p-md-5"},[t("p",{staticClass:"mb-5"},[a._v("Los beneficios de aplicar el OCP, son:")]),t("div",{staticClass:"row justify-content-center align-items-stretch"},[t("div",{staticClass:"col-lg-3 mb-4",attrs:{"data-aos":"zoom-in-up"}},[t("div",{staticClass:"custom-image-card-2 h-100"},[t("img",{staticClass:"custom-image-card__image",attrs:{src:s("5dec"),alt:""}}),t("div",{staticClass:"custom-image-card__text p-4"},[t("h5",{staticClass:"mb-2 text-center"},[a._v("Estabilidad del código")]),t("p",{staticClass:"mb-0"},[a._v("Se evitan errores al no tocar código previamente probado.")])])])]),t("div",{staticClass:"col-lg-3 mb-4",attrs:{"data-aos":"zoom-in-down"}},[t("div",{staticClass:"custom-image-card-2 h-100"},[t("img",{staticClass:"custom-image-card__image",attrs:{src:s("c819"),alt:""}}),t("div",{staticClass:"custom-image-card__text p-4"},[t("h5",{staticClass:"mb-2 text-center"},[a._v("Escalabilidad")]),t("p",{staticClass:"mb-0"},[a._v("El sistema puede crecer sin afectar las funcionalidades ya implementadas.")])])])]),t("div",{staticClass:"col-lg-3 mb-4",attrs:{"data-aos":"zoom-in-down"}},[t("div",{staticClass:"custom-image-card-2 h-100"},[t("img",{staticClass:"custom-image-card__image",attrs:{src:s("3cd3"),alt:""}}),t("div",{staticClass:"custom-image-card__text p-4"},[t("h5",{staticClass:"mb-2 text-center"},[a._v("Mantenibilidad")]),t("p",{staticClass:"mb-0"},[a._v("Los cambios se concentran en nuevas clases o módulos.")])])])]),t("div",{staticClass:"col-lg-3 mb-4",attrs:{"data-aos":"zoom-in-down"}},[t("div",{staticClass:"custom-image-card-2 h-100"},[t("img",{staticClass:"custom-image-card__image",attrs:{src:s("e045"),alt:""}}),t("div",{staticClass:"custom-image-card__text p-4"},[t("h5",{staticClass:"mb-2 text-center"},[a._v("Reutilización y claridad")]),t("p",{staticClass:"mb-0"},[a._v("Cada entidad tiene un propósito definido y es fácilmente ampliable.")])])])])])])])},function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("div",{staticClass:"titulo-segundo",attrs:{id:"t_7_4","data-aos":"flip-up"}},[s("h2",[s("span",[a._v("7.4")]),a._v(" Principio de Sustitución de Liskov (LSP)")])])},function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("p",{staticClass:"mb-4",attrs:{"data-aos":"fade-right"}},[a._v("En el PDF "),s("b",[a._v("Principio de Sustitución de Liskov")]),a._v(", se presentan ejemplos prácticos que permiten identificar cuándo se cumple o se infringe este principio, destacando su impacto en la estructura lógica del "),s("em",[a._v("Software")]),a._v(" y ofreciendo pautas claras para implementar jerarquías de clases correctas y funcionales.")])},function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("div",{staticClass:"anexo__texto"},[s("p",[s("strong",[a._v("Anexo. ")]),a._v(" Principio de Sustitución de Liskov (LSP).")])])},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"col-lg-4 order-1 mb-3 mb-lg-0"},[t("figure",{attrs:{"data-aos":"zoom-in"}},[t("img",{attrs:{src:s("0d07"),alt:""}})])])},function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("div",{staticClass:"titulo-segundo",attrs:{id:"t_7_5","data-aos":"flip-up"}},[s("h2",[s("span",[a._v("7.5")]),a._v(" Principio de Segregación de Interfaces (ISP)")])])},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"row mb-5"},[t("div",{staticClass:"col-lg-5 order-lg-2 mb-3 mb-lg-0"},[t("figure",[t("img",{attrs:{src:s("76e1"),"data-aos":"zoom-in"}})])]),t("div",{staticClass:"col-lg-7 order-lg-1"},[t("div",{staticClass:"bg-color-4 p-4 mb-3",attrs:{"data-aos":"fade-left"}},[t("div",{staticClass:"row align-items-start"},[t("div",{staticClass:"col-lg-auto"},[t("img",{staticClass:"mx-auto",staticStyle:{"max-width":"90px"},attrs:{src:s("7192")}})]),t("div",{staticClass:"col-lg"},[t("p",{staticClass:"mb-0"},[a._v("El Principio de Segregación de Interfaces ("),t("em",[a._v("Interface Segregation Principle")]),a._v(" - ISP), establece que ningún cliente debe verse obligado a depender de métodos que no utiliza. En otras palabras, las interfaces deben ser específicas y pequeñas, orientadas a roles bien definidos, evitando la creación de interfaces generales que obliguen a implementar funcionalidades innecesarias (Leiva, 2021).")])])])]),t("p",{attrs:{"data-aos":"fade-left"}},[a._v("Este principio busca evitar el acoplamiento innecesario entre las clases y los módulos del "),t("em",[a._v("Software")]),a._v(", favoreciendo un diseño más flexible, fácil de mantener y de escalar.")])])])},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"bg-color-9 p-5"},[t("div",{staticClass:"row justify-content-around align-items-center"},[t("div",{staticClass:"col-lg-3"},[t("figure",[t("img",{attrs:{src:s("8ade"),"data-aos":"zoom-in"}})])]),t("div",{staticClass:"col-lg-5"},[t("figure",[t("img",{attrs:{src:s("fb9f"),"data-aos":"zoom-in"}})])])])])},function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("div",{staticClass:"bg-color-10 mb-5"},[s("div",{staticClass:"px-4 px-md-5 py-4"},[s("p",{staticClass:"mb-0"},[a._v("En este caso, la clase ImpresoraBasica solo necesita imprimir, pero se ve forzada a implementar métodos que no son parte de su funcionalidad, lo que viola el principio ISP.")])])])},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"bg-color-9 p-5 mb-5"},[t("div",{staticClass:"row justify-content-center"},[t("div",{staticClass:"col-lg-6"},[t("figure",[t("img",{attrs:{src:s("00db"),"data-aos":"zoom-in"}})])]),t("div",{staticClass:"col-lg-6"},[t("figure",[t("img",{attrs:{src:s("3cc9"),"data-aos":"zoom-in"}})]),t("div",{staticClass:"bg-color-2 mb-5 text-white p-4"},[t("p",{staticClass:"mb-0"},[a._v("Con este enfoque, cada clase solo depende de las interfaces que le son útiles, cumpliendo así con el ISP y favoreciendo la modularidad y el principio de mínima responsabilidad.")])])])])])},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"bg-color-1 mb-5",attrs:{"data-aos":"fade-left"}},[t("div",{staticClass:"row align-items-center"},[t("div",{staticClass:"col-lg-4 mb-3 mb-lg-0"},[t("img",{staticClass:"mx-auto",attrs:{src:s("af5e")}})]),t("div",{staticClass:"col-lg-8 p-5"},[t("p",[a._v("Los beneficios del ISP, son:")]),t("ul",{staticClass:"lista-ul--color"},[t("li",{staticClass:"mb-2 d-flex"},[t("i",{staticClass:"far fa-arrow-alt-circle-right"}),t("p",{staticClass:"mb-0"},[a._v("Mejora la cohesión del código, debido a que las clases solo se relacionan con funcionalidades relevantes.")])]),t("li",{staticClass:"mb-2 d-flex"},[t("i",{staticClass:"far fa-arrow-alt-circle-right"}),t("p",{staticClass:"mb-0"},[a._v("Facilita la reutilización y el mantenimiento del "),t("em",[a._v("Software")]),a._v(".")])]),t("li",{staticClass:"mb-2 d-flex"},[t("i",{staticClass:"far fa-arrow-alt-circle-right"}),t("p",{staticClass:"mb-0"},[a._v("Reduce el impacto de los cambios, dado que las modificaciones en una interfaz no afectan a clases que no la usan.")])]),t("li",{staticClass:"mb-2 d-flex"},[t("i",{staticClass:"far fa-arrow-alt-circle-right"}),t("p",{staticClass:"mb-0"},[a._v("Simplifica las pruebas unitarias, permitiendo aislar los comportamientos fácilmente.")])])])])])])},function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("div",{staticClass:"titulo-segundo",attrs:{id:"t_7_6","data-aos":"flip-up"}},[s("h2",[s("span",[a._v("7.6")]),a._v(" Principio de Inversión de Dependencias (DIP)")])])},function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("p",{staticClass:"mb-4",attrs:{"data-aos":"fade-right"}},[a._v("En el PDF "),s("b",[a._v("Principio de Inversión de Dependencias")]),a._v(", se exponen ejemplos prácticos y soluciones estructuradas que ilustran cómo aplicar este principio correctamente, integrando técnicas como la inyección de dependencias para lograr sistemas más mantenibles, adaptables y fáciles de probar en entornos reales de desarrollo.")])},function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("div",{staticClass:"anexo__texto"},[s("p",[s("strong",[a._v("Anexo. ")]),a._v(" Principio de Inversión de Dependencias (DIP).")])])},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"col-lg-4 mb-3 mb-lg-0"},[t("figure",{attrs:{"data-aos":"zoom-in"}},[t("img",{attrs:{src:s("8c1e"),alt:""}})])])},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"col-12 col-md-6 col-lg-3 offset-lg-1"},[t("figure",[t("img",{attrs:{src:s("2391"),alt:""}})])])}],o=s("f31f"),c={name:"Tema7",components:{Actividad:o["default"]},data:function(){return{cuestionario:{tema:"ANÁLISIS Y DISEÑO DE SOFTWARE",titulo:"Ponte a prueba",introduccion:"Demuestra lo que aprendiste en esta unidad y pon a prueba tus conocimientos.",barajarPreguntas:!0,preguntas:[{id:1,texto:"¿Cuál de las siguientes es una técnica comúnmente utilizada para la recopilación de requisitos?",imagen:"",barajarRespuestas:!0,opciones:[{id:"a",texto:"Análisis de costo-beneficio",esCorrecta:!1},{id:"b",texto:"Entrevistas",esCorrecta:!0},{id:"c",texto:"Programación extrema",esCorrecta:!1},{id:"d",texto:"Revisión de código",esCorrecta:!1}],mensaje_correcto:"¡Muy bien! Ha acertado la respuesta.",mensaje_incorrecto:"Lo sentimos, su respuesta no es la correcta."},{id:2,texto:"¿Qué es la priorización de requisitos en el desarrollo de software?",imagen:"",barajarRespuestas:!0,opciones:[{id:"a",texto:"El proceso de eliminar requisitos innecesarios.",esCorrecta:!1},{id:"b",texto:"El proceso de determinar la importancia relativa de los requisitos.",esCorrecta:!0},{id:"c",texto:"El proceso de clasificar los requisitos según su dificultad de implementación.",esCorrecta:!1},{id:"d",texto:"El proceso de crear nuevos requisitos basados en las necesidades del cliente.",esCorrecta:!1}],mensaje_correcto:"¡Muy bien! Ha acertado la respuesta.",mensaje_incorrecto:"Lo sentimos, su respuesta no es la correcta."},{id:3,texto:"¿Qué herramienta de análisis se utiliza comúnmente para visualizar los procesos de negocio?",imagen:"",barajarRespuestas:!0,opciones:[{id:"a",texto:"Diagrama de flujo",esCorrecta:!0},{id:"b",texto:"Diagrama de Gantt",esCorrecta:!1},{id:"c",texto:"Diagrama de clases",esCorrecta:!1},{id:"d",texto:"Diagrama de estado",esCorrecta:!1}],mensaje_correcto:"¡Muy bien! Ha acertado la respuesta.",mensaje_incorrecto:"Lo sentimos, su respuesta no es la correcta."},{id:4,texto:"¿Cuál de las siguientes es una técnica útil para la elicitar requisitos en proyectos ágiles?",imagen:"",barajarRespuestas:!0,opciones:[{id:"a",texto:"Análisis estático de código",esCorrecta:!1},{id:"b",texto:"Historias de usuario",esCorrecta:!0},{id:"c",texto:"Revisión de documentos de requisitos previos",esCorrecta:!1},{id:"d",texto:"Modelado de datos",esCorrecta:!1}],mensaje_correcto:"¡Muy bien! Ha acertado la respuesta.",mensaje_incorrecto:"Lo sentimos, su respuesta no es la correcta."},{id:5,texto:"¿Cuál de las siguientes opciones NO es una herramienta comúnmente utilizada en el análisis de requisitos?",imagen:"",barajarRespuestas:!0,opciones:[{id:"a",texto:"Análisis FODA",esCorrecta:!0},{id:"b",texto:"Matriz de trazabilidad de requisitos",esCorrecta:!1},{id:"c",texto:"Diagramas de casos de uso",esCorrecta:!1},{id:"d",texto:"Diagrama de flujo de datos",esCorrecta:!1}],mensaje_correcto:"¡Muy bien! Ha acertado la respuesta.",mensaje_incorrecto:"Lo sentimos, su respuesta no es la correcta."}],mensaje_final_aprobado:"¡Felicidades! Has superado la prueba con éxito.",mensaje_final_reprobado:"Te recomendamos repasar nuevamente la unidad para reforzar los conceptos clave antes de volver a intentarlo."}}},mounted:function(){var a=this;this.$nextTick((function(){a.$aosRefresh()}))}},r=c,l=(s("c54e"),s("2877")),n=Object(l["a"])(r,t,i,!1,null,null,null);e["default"]=n.exports},"37b0":function(a,e,s){a.exports=s.p+"img/11.0a7a6e8b.svg"},"3cc9":function(a,e,s){a.exports=s.p+"img/27.699262ea.png"},"3cd3":function(a,e,s){a.exports=s.p+"img/19.2c3447da.png"},"3f5c":function(a,e,s){},"4d8e":function(a,e,s){a.exports=s.p+"img/16.bac327d8.png"},"57af":function(a,e,s){a.exports=s.p+"img/8.4b49f4f5.svg"},"5dec":function(a,e,s){a.exports=s.p+"img/17.40206e7f.png"},"6530b":function(a,e,s){a.exports=s.p+"img/15.30bc82ad.png"},6734:function(a,e,s){a.exports=s.p+"img/7.2a2ce7f6.svg"},"6ddc":function(a,e,s){a.exports=s.p+"img/6.6e61b891.svg"},7192:function(a,e,s){a.exports=s.p+"img/23.4513bfdf.svg"},"71e3":function(a,e,s){a.exports=s.p+"img/1.8524f4f7.png"},7447:function(a,e,s){a.exports=s.p+"img/3.5f17850e.svg"},"76e1":function(a,e,s){a.exports=s.p+"img/22.f82f8a38.png"},"8ade":function(a,e,s){a.exports=s.p+"img/24.af8f7ae4.png"},"8c1e":function(a,e,s){a.exports=s.p+"img/29.e039b797.png"},"8e9a":function(a,e,s){a.exports=s.p+"img/4.3aed601f.svg"},"8ec2":function(a,e,s){a.exports=s.p+"img/10.ade1f945.png"},"9cff":function(a,e,s){a.exports=s.p+"img/9.52b76b56.png"},a437:function(a,e,s){a.exports=s.p+"img/link.317b045f.svg"},af5e:function(a,e,s){a.exports=s.p+"img/28.4006e8e9.svg"},b6b3:function(a,e,s){a.exports=s.p+"img/13.9e091275.svg"},c54e:function(a,e,s){"use strict";s("3f5c")},c59e:function(a,e,s){a.exports=s.p+"img/5.dcfa6e54.svg"},c819:function(a,e,s){a.exports=s.p+"img/18.97b0662f.png"},d8fd:function(a,e,s){a.exports=s.p+"img/14.9d953a75.png"},e045:function(a,e,s){a.exports=s.p+"img/20.02647bf0.png"},e9fd:function(a,e,s){a.exports=s.p+"img/2.808cb561.png"},f906:function(a,e,s){a.exports=s.p+"img/icono-pdf.5c464bfe.svg"},fb9f:function(a,e,s){a.exports=s.p+"img/25.e521e8ae.png"}}]);
//# sourceMappingURL=tema7.c3dac205.js.map